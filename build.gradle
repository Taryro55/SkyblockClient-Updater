plugins {
    id("org.jetbrains.kotlin.plugin.serialization") version("1.6.10")
    id("dev.architectury.architectury-pack200") version("0.1.3")
    id("org.jetbrains.kotlin.jvm") version("1.6.10")
    id("gg.essential.loom") version("0.10.0.1")
    id("java")
}

archivesBaseName = "SkyblockClient-Updater"
version = "1.2.0"
group = "mynameisjeff"

java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = "UTF-8"

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ["-Xjvm-default=all", "-opt-in=kotlin.RequiresOptIn"]
    }
}
compileKotlin.kotlinDaemonJvmArguments = [
        "-Xmx2G",
        "-Dkotlin.enableCacheBuilding=true",
        "-Dkotlin.useParallelTasks=true",
        "-Dkotlin.enableFastIncremental=true"
]

loom {
    launchConfigs {
        client {
            arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
        }
    }

    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }

    forge {
        pack200Provider = new dev.architectury.pack200.java.Pack200Adapter()
    }
}

configurations {
    shade
    implementation.extendsFrom(shade)
}

repositories {
    mavenCentral()
    maven { url("https://repo.sk1er.club/repository/maven-public/") }
    maven { url("https://repo.spongepowered.org/maven/") }
}

dependencies {
    minecraft("com.mojang:minecraft:1.8.9")
    mappings("de.oceanlabs.mcp:mcp_stable:22-1.8.9")
    forge("net.minecraftforge:forge:1.8.9-11.15.1.2318-1.8.9")

    shade("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2") {
        exclude module: "kotlin-stdlib"
        exclude module: "kotlin-stdlib-jdk8"
    }

    shade("gg.essential:loader-launchwrapper:1.1.3")
    compileOnly("gg.essential:essential-1.8.9-forge:1788")
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(configurations.shade.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude("gg.essential.vigilance.example.ExampleMod", "dummyThing")
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    manifest.attributes(
            "ModSide": "CLIENT"
    )
}

processResources {
    inputs.property("version", project.version)

    filesMatching("mcmod.info") {
        expand("version": project.version)
    }
}

sourceSets {
    main {
        output.setResourcesDir(file("${buildDir}/classes/kotlin/main"))
    }
}